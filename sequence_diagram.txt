actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group#43829c #lightblue Registration
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break User with username already exists
DataAccess --> Service: UserData
Service --> Server: AlreadyTakenException
Server --> Client: 403\n{"message": "Error: username already taken"}
end
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group#orange #FCEDCA Login
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {username, password}
Handler -> Service: loginuser(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break No user found
DataAccess --> Service: UserData
Service --> Server: UserNotFoundException
Server --> Client: 401\n{"message": "Error: no user found"}
end
Service -> DataAccess: getPassword(username, password)
DataAccess -> db: verify password
break Password is incorrect
DataAccess --> Service: UserData
Service --> Server: WrongPasswordException
Server --> Client: 401\n{"message": "Error: incorrect password"}
end
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: LoginResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group#green #lightgreen Logout
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: authToken
Handler -> Service: logoutuser(authtoken)
Service -> DataAccess: deleteAuthToken(authtoken)
DataAccess -> db: Delete AuthData
break Error loging out
DataAccess --> Service: UserData
Service --> Server: CannotAuthorizeException
Server --> Client: 401\n{"message": "Error: cannot logout"}
end
Service --> Handler: {}
Handler --> Server: {}
Server --> Client: 200\n{}
end

group#red #pink List Games
Client -> Server: [GET] /game\nauthToken
Server -> Handler: {authToken}
Handler -> Service: listGames(authToken)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: verify authToken
break not authorized
DataAccess --> Service: UserData
Service --> Server: CannotAuthorizeException
Server --> Client: 401\n{"message": "Error: incorrect password"}
end
Service -> DataAccess: getGames(authToken)
DataAccess -> db: Find Games
Service --> Handler: { "gameID": 1234 }
Handler --> Server: { "gameID": 1234 }
Server --> Client: 200\n{ "gameID": 1234 }
end

group#d790e0 #E3CCE6 Create Game 
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: {authToken, gameName}
Handler -> Service: createGame(authToken, gameName)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: verify authToken
break not authorized
DataAccess --> Service: UserData
Service --> Server: CannotAuthorizeException
Server --> Client: 401\n{"message": "Error: incorrect password"}
end
Service -> DataAccess:createGame(gameName)
DataAccess -> db:Add Game
Service --> Handler: { "gameID": 1234 }
Handler --> Server: { "gameID": 1234 }
Server --> Client: 200\n{ "gameID": 1234 }
end

group#yellow #lightyellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: {authToken, playerColor, gameID}
Handler -> Service: joinGame(authToken, playerColor, gameName)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: verify authToken
break not authorized
DataAccess --> Service: UserData
Service --> Server: CannotAuthorizeException
Server --> Client: 401\n{"message": "Error: incorrect password"}
end
Service -> DataAccess:getGame(gameName)
DataAccess -> db: Join Game
break not authorized
DataAccess --> Service: UserData
Service --> Server: GameFullException
Server --> Client: 403\n{"message": "Error: game taken"}
end
Service --> Handler: {}
Handler --> Server: {}
Server --> Client: 200\n{}
end

group#gray #lightgray Clear application 
Client -> Server: [DELETE] /db
Server -> Handler: {}
Handler -> Service: cleardb()
Service -> DataAccess: cleardb()
DataAccess -> db: Remove Users
DataAccess -> db: Remove Games
DataAccess -> db: Remove AuthTokens
break Cannot access database
DataAccess --> Service: error
Service --> Server: CannotAccessDBException
Server --> Client: 500 {"message": "Error: cannot access db"}
end
DataAccess --> Service: null
Service --> Handler: {}
Handler --> Server: {}
Server --> Client: 200\n{}
end
